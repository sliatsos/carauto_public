@page "/vehicleorder/{OrderId?}"
@using CarAuto.GrpcClientWrapper;
@using CarAuto.Protos.Customer;
@using CarAuto.Protos.Order;
@using CarAuto.Protos.Vehicle;
@using CarAuto.UI.Components.Wizard;
@using CarAuto.UI.Models;
@using System.Security.Claims;
@using Google.Protobuf.WellKnownTypes;
@using Grpc.Core;
@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable

<CascadingValue Value="_model">
    <Wizard Id="DemoWizard" ActiveStepIx="@_model.ActiveIndex">
        <WizardStep Name="Order Creation" Description="First Step Description">
            <OrderFirstStep OrderCreated="OrderCreatedEventHandler" />
        </WizardStep>
        <WizardStep Name="Order Confirmation" Description="Second Step Description">
            <OrderSecondStep />
        </WizardStep>
        <WizardStep Name="Order Finalization" Description="Third Step Description">
            <OrderSecondStep />
        </WizardStep>
        <WizardStep Name="Order Invoice" Description="Fourth Step Description">
            <OrderInvoicePdfViewStep />
        </WizardStep>
    </Wizard>
</CascadingValue>

@code {
    private OrderModel _model { get; set; } = new OrderModel();
    private HubConnection _quoteToOrderHubConnection;
    private HubConnection _invoiceToOrderHubConnection;
    private bool disposed = false;
    [Inject] private ISnackbar _snackbar { get; set; }

    [Inject]
    private IGrpcClientWrapper _grpcClientWrapper { get; set; }

    [Parameter] public string? OrderId { get; set; }

    public async ValueTask DisposeAsync()
    {
        await DisposeAsync(true);
        GC.SuppressFinalize(this);
    }

    protected virtual async Task DisposeAsync(bool disposing)
    {
        // Check to see if Dispose has already been called.
        if (!this.disposed)
        {
            // If disposing equals true, dispose all managed
            // and unmanaged resources.
            if (disposing)
            {
                // Dispose managed resources.
                await _quoteToOrderHubConnection.StopAsync();
                await _invoiceToOrderHubConnection.StopAsync();

            }

            // Note disposing has been done.
            disposed = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await StartQuoteToOrderHubConnection();
        SetQuoteToOrderRefreshDataListener();

        await StartInvoiceToOrderHubConnection();
        SetInvoiceToOrderRefreshDataListener();
    }

    private async Task StartQuoteToOrderHubConnection()
    {
        var apiAddress = "http://orders";


        var sensorDataUrl = ($"{apiAddress}/quoteToOrder");
        _quoteToOrderHubConnection = new HubConnectionBuilder()
                        .WithUrl(sensorDataUrl)
                        .Build();


        await _quoteToOrderHubConnection.StartAsync();
    }

    private void SetQuoteToOrderRefreshDataListener()
    {
        var methodName = "QuoteToOrder";


        _quoteToOrderHubConnection.On<Order>(methodName, (data) =>
        {
            _ = InvokeAsync(() =>
            {
                _model.ActiveIndex = 2;
                _snackbar.Add("The order was created successfully", Severity.Success);
                StateHasChanged();
            });
        });
    }

    private async Task StartInvoiceToOrderHubConnection()
    {
        var apiAddress = "http://invoices";


        var sensorDataUrl = ($"{apiAddress}/invoiceToOrder");
        _invoiceToOrderHubConnection = new HubConnectionBuilder()
                        .WithUrl(sensorDataUrl)
                        .Build();


        await _invoiceToOrderHubConnection.StartAsync();
    }

    private void SetInvoiceToOrderRefreshDataListener()
    {
        var methodName = "InvoiceToOrder";

        _invoiceToOrderHubConnection.On<Order>(methodName, (data) =>
        {
            _ = InvokeAsync(() =>
            {
                _model.ActiveIndex = 3;
                _snackbar.Add("The order was invoiced successfully", Severity.Success);
                StateHasChanged();
            });
        });
    }

    private void OrderCreatedEventHandler(Order order)
    {
        _model.Id = order.Id;
        _model.OrderNumber = order.OrderNumber;
        _model.Options.Clear();
        _model.Options.AddRange(order.Options);
        _model.ActiveIndex = 1;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(OrderId))
        {
            _model.ActiveIndex = 0;
            return;
        }

        _model.Customer = await GetCustomerAsync();
        var order = await GetOrderByIdAsync();
        _model.OrderNumber = order.OrderNumber;
        _model.OrderStatus = order.OrderStatus;
        _model.Options.AddRange(order.Options);
        _model.Model = await GetModelByIdAsync(order.ModelId);
        _model.Id = order.Id;
        if (_model.OrderStatus == Protos.Enums.OrderStatus.Open)
        {
            _model.ActiveIndex = 1;
        }
        else if (_model.OrderStatus == Protos.Enums.OrderStatus.Approved)
        {
            _model.ActiveIndex = 2;
        }
        else if (_model.OrderStatus == Protos.Enums.OrderStatus.Invoiced)
        {
            _model.ActiveIndex = 3;
        }
    }

    private async Task<Model> GetModelByIdAsync(string modelId)
    {
        if (string.IsNullOrEmpty(modelId))
        {
            return null;
        }

        var modelResponse = await _grpcClientWrapper.CallGrpcServiceAsync<ModelService.ModelServiceClient, GetModelRequest, GetModelResponse>(
            new GetModelRequest
                {
                    Id = modelId,
                },
            nameof(ModelService.ModelServiceClient.GetModel),
            new Metadata());

        return modelResponse.Model;
    }

    private async Task<Order> GetOrderByIdAsync()
    {
        if (string.IsNullOrEmpty(OrderId))
        {
            return null;
        }

        var userOrders = await _grpcClientWrapper.CallGrpcServiceAsync<OrderService.OrderServiceClient, Empty, GetUserOrdersResponse>(
            new Empty(),
            nameof(OrderService.OrderServiceClient.GetUserOrders),
            new Metadata());

        return userOrders.Orders.FirstOrDefault(e => e.Id == OrderId);
    }

    private async Task<Customer> GetCustomerAsync()
    {
        var customerResponse = await _grpcClientWrapper.CallGrpcServiceAsync<CustomerService.CustomerServiceClient, Empty, GetCustomerResponse>(
            new Empty(),
            nameof(CustomerService.CustomerServiceClient.GetCurrentCustomer),
            new Metadata());
        return customerResponse.Customer;
    }
}

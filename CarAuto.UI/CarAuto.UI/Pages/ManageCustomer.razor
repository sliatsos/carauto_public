@page "/managecustomer/{customerid?}"
@attribute [Authorize(Policy = "IsAdmin")]
@using CarAuto.UI.Validators
@using CarAuto.GrpcClientWrapper
@using CarAuto.Protos.Customer
@using CarAuto.Protos.Enums
@using CarAuto.Protos.User
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@inject NavigationManager NavigationManager
@inject IGrpcClientWrapper GrpcClientWrapper

<MudForm @bind-IsValid="@_success" Model="@_model">
	<MudExpansionPanels DisableBorders="true" MultiExpansion="false">
		<MudExpansionPanel Text="General" IsInitiallyExpanded="true">
			<MudStack Spacing="3">
				<MudStack Spacing="3" Row="true">
					<MudAvatar Size="Size.Large" Rounded="true" Image="@_image"></MudAvatar>
					<MudFileUpload T="IBrowserFile" FilesChanged="HandleFileChangedAsync">
						<ButtonTemplate>
							<MudIconButton HtmlTag="label"
                                           Color="Color.Info"
                                           Icon="@Icons.Material.Filled.PhotoCamera"
                                           for="@context"></MudIconButton>
						</ButtonTemplate>
					</MudFileUpload>
				</MudStack>
				<MudStack Row="true" Spacing="3">
                    <MudStack Spacing="3">
                        <MudTextField T="string" @bind-Value="@_model.Code" Label="Code" Required="true" RequiredError="Code is required!" />
                        <MudSelect T="ContactType" SelectedValues="_selectedContactTypes" SelectedValuesChanged="SelectedContactTypeChanged" Label="Customer Type">
                            <MudSelectItem T="ContactType" Value="@(ContactType.Company)">@(nameof(ContactType.Company))</MudSelectItem>
                            <MudSelectItem T="ContactType" Value="@(ContactType.Person)">@(nameof(ContactType.Person))</MudSelectItem>
                        </MudSelect>
                    </MudStack>
                    <MudStack Spacing="3">
                        <MudTextField T="string" @bind-Value="@_model.DisplayName" Label="Name" Required="true" RequiredError="Name is required!" />
                        <SelectUser SelectedValueChanged="SelectedUserChanged" InitialValue="_initialUser"/>
                    </MudStack>
                </MudStack>
			</MudStack>
		</MudExpansionPanel>
		<MudExpansionPanel Text="Communication" IsInitiallyExpanded="false">
			<MudStack Row="true" Spacing="3">
				<MudStack Spacing="3">
					<MudTextField T="string" @bind-Value="@_model.Email" Label="Email" Required="true" RequiredError="Email is required!" Validation="_emailValidator.Validation" />
					<MudTextField T="string" @bind-Value="@_model.Mobile" Label="Mobile" />
					<MudTextField T="string" @bind-Value="@_model.Phone" Label="Phone" />
				</MudStack>
			</MudStack>
		</MudExpansionPanel>
		<MudExpansionPanel Text="Contact" IsInitiallyExpanded="false">
			<MudStack Row="true" Spacing="3">
				<MudStack Spacing="3">
					<MudTextField T="string" @bind-Value="@_model.Country" Label="Country" Required="true" RequiredError="Country is required!" />
					<MudTextField T="string" @bind-Value="@_model.City" Label="City" />
					<MudTextField T="string" @bind-Value="@_model.County" Label="County" />
				</MudStack>
				<MudStack Spacing="3">
					<MudTextField T="string" @bind-Value="@_model.Address" Label="Address" />
					<MudTextField T="string" @bind-Value="@_model.PostCode" Label="Post Code" />
					<MudSpacer />
					<MudSpacer />
					<MudSpacer />
				</MudStack>
			</MudStack>
		</MudExpansionPanel>
	</MudExpansionPanels>
	<div class="d-flex align-center justify-space-between">
		<MudButton Variant="Variant.Filled"
                   Style="@GetRegistrationVisibility"
                   Color="Color.Primary"
                   Disabled="@(!_success)"
                   Class="ml-auto"
                   OnClick="OnRegisterAsync">Register</MudButton>
		<MudButton Variant="Variant.Filled"
                   Style="@GetUpdateVisibility"
                   Color="Color.Primary"
                   Disabled="@(!_success)"
                   Class="ml-auto"
                   OnClick="OnUpdateAsync">Update</MudButton>
	</div>
</MudForm>

@code {
    private string _image;
    private bool _success;
    private EmailValidator _emailValidator = new();
    private Customer _model = new Customer
        {
            ModifiedOn = Timestamp.FromDateTime(DateTime.UtcNow),
        };
    private User _initialUser { get; set; }

    private List<ContactType> _selectedContactTypes = new();

    [Parameter] public string? CustomerId { get; set; }

    private string GetRegistrationVisibility => CustomerId != null ? "display: none" : string.Empty;
    private string GetUpdateVisibility => CustomerId == null ? "display: none" : string.Empty;

    private async Task OnUpdateAsync()
    {
        await GrpcClientWrapper.CallGrpcServiceAsync<CustomerService.CustomerServiceClient, UpdateCustomerRequest, Empty>(
            new UpdateCustomerRequest
                {
                    Customer = _model,
                },
            nameof(CustomerService.CustomerServiceClient.UpdateCustomer),
            new Metadata());

        NavigationManager.NavigateTo(nameof(Customers), true);
    }

    private async Task OnRegisterAsync()
    {
        await GrpcClientWrapper.CallGrpcServiceAsync<CustomerService.CustomerServiceClient, CreateCustomerRequest, CreateCustomerResponse>(
            new CreateCustomerRequest
                {
                    Customer = _model,
                },
            nameof(CustomerService.CustomerServiceClient.CreateCustomer),
            new Metadata());

        NavigationManager.NavigateTo(nameof(Customers), true);
    }

    private async Task HandleFileChangedAsync(IBrowserFile file)
    {
        var resizedImageFile = await file.RequestImageFileAsync(file.ContentType,
            200, 200);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        _model.Image = Convert.ToBase64String(buffer);

        _image = $"data:{file.ContentType};base64,{_model.Image}";
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (CustomerId == null)
        {
            return;
        }

        var response = await GrpcClientWrapper.CallGrpcServiceAsync<CustomerService.CustomerServiceClient, GetCustomerRequest, GetCustomerResponse>(
            new GetCustomerRequest
                {
                    Id = CustomerId,
                },
            nameof(CustomerService.CustomerServiceClient.GetCustomer),
            new Metadata());

        _model = response.Customer;
        _selectedContactTypes.Add(_model.Type);
        if (!string.IsNullOrEmpty(response.Customer.Image))
        {
            _image = $"data:image/jpeg;base64,{response.Customer.Image}";
        }
        _initialUser = await GetUserAsync(_model.UserId);
        _success = true;
    }

    private async Task<User> GetUserAsync(string id)
    {
        var userResponse =
            await GrpcClientWrapper.CallGrpcServiceAsync<UserService.UserServiceClient, GetUserRequest, GetUserResponse>(
                new GetUserRequest
                {
                    Id = id,
                },
                nameof(UserService.UserServiceBase.GetUser),
                new Metadata());

        return userResponse.User;
    }

    private void SelectedContactTypeChanged(IEnumerable<ContactType> selectedTypes)
    {
        _selectedContactTypes.Clear();
        foreach (var selectedType in selectedTypes)
        {
            _selectedContactTypes.Add(selectedType);
        }
        _model.Type = _selectedContactTypes.First();
    }

    private void SelectedUserChanged(User user)
    {
        _model.UserId = user.Id;
    }

}